// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	aggregate "L0_EVRONE/internal/aggregate"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderNats is a mock of OrderNats interface.
type MockOrderNats struct {
	ctrl     *gomock.Controller
	recorder *MockOrderNatsMockRecorder
}

// MockOrderNatsMockRecorder is the mock recorder for MockOrderNats.
type MockOrderNatsMockRecorder struct {
	mock *MockOrderNats
}

// NewMockOrderNats creates a new mock instance.
func NewMockOrderNats(ctrl *gomock.Controller) *MockOrderNats {
	mock := &MockOrderNats{ctrl: ctrl}
	mock.recorder = &MockOrderNatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderNats) EXPECT() *MockOrderNatsMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockOrderNats) Set(arg0 context.Context, arg1 aggregate.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOrderNatsMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOrderNats)(nil).Set), arg0, arg1)
}

// MockOrderApi is a mock of OrderApi interface.
type MockOrderApi struct {
	ctrl     *gomock.Controller
	recorder *MockOrderApiMockRecorder
}

// MockOrderApiMockRecorder is the mock recorder for MockOrderApi.
type MockOrderApiMockRecorder struct {
	mock *MockOrderApi
}

// NewMockOrderApi creates a new mock instance.
func NewMockOrderApi(ctrl *gomock.Controller) *MockOrderApi {
	mock := &MockOrderApi{ctrl: ctrl}
	mock.recorder = &MockOrderApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderApi) EXPECT() *MockOrderApiMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrderApi) Get(arg0 context.Context, arg1 string) (aggregate.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(aggregate.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderApiMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderApi)(nil).Get), arg0, arg1)
}

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// GetRep mocks base method.
func (m *MockOrderRepository) GetRep(arg0 string) (aggregate.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRep", arg0)
	ret0, _ := ret[0].(aggregate.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRep indicates an expected call of GetRep.
func (mr *MockOrderRepositoryMockRecorder) GetRep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRep", reflect.TypeOf((*MockOrderRepository)(nil).GetRep), arg0)
}

// PutRep mocks base method.
func (m *MockOrderRepository) PutRep(arg0 aggregate.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRep", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutRep indicates an expected call of PutRep.
func (mr *MockOrderRepositoryMockRecorder) PutRep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRep", reflect.TypeOf((*MockOrderRepository)(nil).PutRep), arg0)
}

// MockOrderPostgresRepository is a mock of OrderPostgresRepository interface.
type MockOrderPostgresRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPostgresRepositoryMockRecorder
}

// MockOrderPostgresRepositoryMockRecorder is the mock recorder for MockOrderPostgresRepository.
type MockOrderPostgresRepositoryMockRecorder struct {
	mock *MockOrderPostgresRepository
}

// NewMockOrderPostgresRepository creates a new mock instance.
func NewMockOrderPostgresRepository(ctrl *gomock.Controller) *MockOrderPostgresRepository {
	mock := &MockOrderPostgresRepository{ctrl: ctrl}
	mock.recorder = &MockOrderPostgresRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPostgresRepository) EXPECT() *MockOrderPostgresRepositoryMockRecorder {
	return m.recorder
}

// GetPgAllRep mocks base method.
func (m *MockOrderPostgresRepository) GetPgAllRep() ([]aggregate.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPgAllRep")
	ret0, _ := ret[0].([]aggregate.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPgAllRep indicates an expected call of GetPgAllRep.
func (mr *MockOrderPostgresRepositoryMockRecorder) GetPgAllRep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPgAllRep", reflect.TypeOf((*MockOrderPostgresRepository)(nil).GetPgAllRep))
}

// GetPgRep mocks base method.
func (m *MockOrderPostgresRepository) GetPgRep(arg0 string) (aggregate.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPgRep", arg0)
	ret0, _ := ret[0].(aggregate.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPgRep indicates an expected call of GetPgRep.
func (mr *MockOrderPostgresRepositoryMockRecorder) GetPgRep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPgRep", reflect.TypeOf((*MockOrderPostgresRepository)(nil).GetPgRep), arg0)
}

// PutPgRep mocks base method.
func (m *MockOrderPostgresRepository) PutPgRep(arg0 aggregate.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPgRep", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPgRep indicates an expected call of PutPgRep.
func (mr *MockOrderPostgresRepositoryMockRecorder) PutPgRep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPgRep", reflect.TypeOf((*MockOrderPostgresRepository)(nil).PutPgRep), arg0)
}
